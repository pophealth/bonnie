<% content_for :head do %>
  <script type="text/javascript">

  var page = new PatientBuilderPage(
    <%= @data_criteria.to_json.html_safe %>,
    <%= @value_sets.to_json.html_safe %>,
    <%= @record['source_data_criteria'].to_json.html_safe %>
  );

  $(document).ready(function() {
    page.initialize();

    $('#birthdate').datetimepicker();

    $('#measure_period_start').datepicker({
      onSelect: function(selectedDate) {
        $( "#measure_period_end" ).datepicker( "option", "minDate", null );
        datechange.call(this, $.Deferred().done(
          function(){
            $( "#measure_period_end" ).datepicker( "option", "minDate", selectedDate );
            onLoadTimeline();
            bonnie.patientBuilder.updateTimeline();
          }
        ));
      }
    }).focus(function(){bonnie.patientBuilder.measurePeriodOrig = new Date($(this).val());});
    $('#measure_period_end').datepicker({
      onSelect: function(selectedDate) {$( "#measure_period_start" ).datepicker( "option", "maxDate", selectedDate ); onLoadTimeline();}
    });

    $('.timepicker-default').timepicker();

    $('#tl').on('dragover', '.timeline-band', function(){
      return false;
    }).on('drop', '.timeline-band', function(e){
      var date = bonnie.timeline.getBand($(this).attr('id').match(/\d+$/)[0]).pixelOffsetToDate(e.originalEvent.pageX - $(this).offset().left);
      var data_criteria = bonnie.patientBuilder.selected_data_criteria[e.originalEvent.dataTransfer.getData('text')];
      data_criteria.end_date += date.getTime() -  data_criteria.start_date;
      data_criteria.start_date = date.getTime();

      if (data_criteria.id == $('#element_id').val()){
        $('#element_start').datetimepicker('setDate', new Date(data_criteria.start_date));
        $('#element_start').datetimepicker('setDate', new Date(data_criteria.end_date));
      }

      bonnie.patientBuilder.updateTimeline();
      bonnie.timeline.getBand(0).setCenterVisibleDate(date)

      // Fixes FF redirect bug
      e.preventDefault();
    }).on('selectstart', function(e){ e.preventDefault(); });

    onLoadTimeline();

    $(".paramChildren label").not('[data-criteria-id=MeasurePeriod] label').draggable({
      helper: "clone",
      containment: 'document',
      revert: false,
      zIndex: 3000,
      distance: 3,
      opacity: "1",
    });

    $('#patient_data_criteria').droppable({ tolerance: 'pointer', greedy: true, accept: 'label.ui-draggable', drop: function(e,obj){ return fillDrop(e,obj); } });


    $('#savebutton').click(
      function(){
        $('form#save_patient_builder').trigger('submit');
      }
    );

    $('#savebutton_matrix').click(
      function(){
        $('form#save_patient_builder').data('redirect_matrix', true).trigger('submit');
      }
    );

    $('#workspace').on('click', '#value_new',
      function(){
        $('#bonnie_tmpl_data_criteria_value').tmpl().insertBefore('#value_new_position');
      }
    );

    $('#workspace').on('click', '#field_new',
      function(){
        var newFieldValue = $('#bonnie_tmpl_data_criteria_field_value').tmpl().insertBefore('#field_new_position');
        newFieldValue.find(".data_criteria_datetime .datetime").datetimepicker();
      }
    );

    $('#workspace').on('click', '.field_value > .close, .criteria_value .close',
      function(e){
        $(e.target).parent().parent().remove();
      }
    );

    $('#workspace').on('change', 'select[name=negation]',
      function(){
        $(this).parents('#workspace').find('.negation_reason_oid').slideToggle();
      }
    );

  });

  var fillDrop = function(event, obj){
    var id = $(obj.draggable).data('criteria-id');
    var source_data_criteria = bonnie.patientBuilder.dataCriteria(id)
    var data_criteria = source_data_criteria.duplicate(id+'_'+bonnie.patientBuilder.nextDataCriteriaId())
    data_criteria.source = id
    html = data_criteria.asHtml('data_criteria')
    $(event.target).append(html)
    bonnie.patientBuilder.registerDataCriteria(data_criteria);
    html.click(function(event) {
      bonnie.patientBuilder.editDataCriteria(event.currentTarget);
      data_criteria = bonnie.patientBuilder.selectedDataCriteria($(event.currentTarget).data('criteria-id'))
      bonnie.patientBuilder.timelineToDataCriteria(data_criteria);

      bonnie.timeline.getBand(0).getEventPainter().setHighlightMatcher(
        function(evt){
          return evt._id == $(event.currentTarget).data('criteria-id') ? 2 : -1;
        }
      );
      bonnie.timeline.paint();
    }).trigger('click');
    $('.paramGroup[data-criteria-id='+data_criteria.id+'] .removeDataCriteria').click(function(event) {
      bonnie.patientBuilder.detachDataCriteria(data_criteria);
      event.stopPropagation();
    });
    return data_criteria;
  }

  var datechange = function(deferred){
    var prev = bonnie.patientBuilder.measurePeriodOrig, next = new Date($(this).val()), offsetstring = 'forward by ';
    if (prev.getTime() == next.getTime()) return;
    $(this).blur();
    if (prev > next){
      var temp = next;
      next = prev;
      prev = temp;
      offsetstring = 'backward by ';
      var reversed = true;
    }
    var offset = [
      next.getFullYear() - prev.getFullYear(),
      next.getMonth() - prev.getMonth(),
      next.getDate() - prev.getDate()
    ];

    if (offset[2] < 0) offset[1]--;
    if (offset[1] < 0){
      offset[0]--;
      offset[1] += 12;
    }
    if (offset[2] < 0) offset[2] += 32 - new Date(next.getFullYear() - ((next.getMonth() - prev.getMonth()) < 0 ? 1 : 0), (next.getMonth() + 11) % 12, 32).getDate()

    offsetstring += (offset[0] ? offset[0] + ' year' + (offset[0] == 1 ? '' : 's') + ' ' : '') +
      (offset[1] ? offset[1] + ' month' + (offset[1] == 1 ? '' : 's') + ' ' : '') +
      (offset[2] ? offset[2] + ' day' + (offset[2] == 1 ? '' : 's') + ' ' : '')

    if (reversed) offset = offset.map(function(e){ return -e; });

    $('#bonnie_tmpl_confirm_shift').tmpl({offsetstring: offsetstring}).appendTo(document.body).modal().on('hidden',
      function(){
        if (deferred) deferred.resolve();
        $(this).remove();
      }
    ).find('.btn.btn-primary').click(
      function(){
        var old_date = new Date($('#birthdate').val());
        $('#birthdate').datetimepicker('setDate', new Date(old_date.getFullYear() + offset[0], old_date.getMonth() + offset[1], old_date.getDate() + offset[2], old_date.getHours(), old_date.getMinutes(), old_date.getSeconds(), old_date.getMilliseconds()));
        old_date = new Date($('#measure_period_end').val());
        $('#measure_period_end').datetimepicker('setDate', new Date(old_date.getFullYear() + offset[0], old_date.getMonth() + offset[1], old_date.getDate() + offset[2]));

        $.each(bonnie.patientBuilder.selected_data_criteria,
          function(i, e){
            var old_date = new Date(e.start_date);
            e.start_date = new Date(old_date.getFullYear() + offset[0], old_date.getMonth() + offset[1], old_date.getDate() + offset[2], old_date.getHours(), old_date.getMinutes(), old_date.getSeconds(), old_date.getMilliseconds()).getTime();
            old_date = new Date(e.end_date);
            if (e.end_date != 32503698000000){
              e.end_date = new Date(old_date.getFullYear() + offset[0], old_date.getMonth() + offset[1], old_date.getDate() + offset[2], old_date.getHours(), old_date.getMinutes(), old_date.getSeconds(), old_date.getMilliseconds()).getTime();
            }
            if (e.field_values) {
              $.each(_.keys(e.field_values), 
                function(index, val){ 
                  if (e.field_values[val].type == "TS"){
                    old_date = new Date(e.field_values[val].value);
                    new_date = new Date(old_date.getFullYear() + offset[0], old_date.getMonth() + offset[1], old_date.getDate() + offset[2], old_date.getHours(), old_date.getMinutes(), old_date.getSeconds(), old_date.getMilliseconds());
                    new_date_string = (new_date.getMonth()+1) + "/" 
                                      + new_date.getDate() + "/" 
                                      + new_date.getFullYear() + " " 
                                      + new_date.getHours() + ":" 
                                      + new_date.getMinutes() + ":"
                                      + new_date.getSeconds();
                    e.field_values[val].value = new_date_string; 
                  } 
                } 
              );
            }
            if (e.id == $('#element_id').val()){
              $('#element_start').datetimepicker('setDate', new Date(e.start_date));
              $('#element_end').datetimepicker('setDate', new Date(e.end_date));
            }
          }
        );

        old_date = bonnie.timeline.getBand(0).getCenterVisibleDate();
        bonnie.timeline.getBand(0).setCenterVisibleDate(new Date(old_date.getFullYear() + offset[0], old_date.getMonth() + offset[1], old_date.getDate() + offset[2], old_date.getHours(), old_date.getMinutes(), old_date.getSeconds(), old_date.getMilliseconds()));

        $('#workspace .close_edit').click();
        $(this).parent().parent().modal('hide');
      }
    );
  }

  </script>
  <!-- Load the Timeline library after reseting the fonts, etc -->
  <script src="/timeline_js/timeline-api.js?bundle=true&forceLocale=en" type="text/javascript"></script>


  <script type="text/javascript">
    var tl;
    SimileAjax.History.enabled = false;
    Timeline.OriginalEventPainter.prototype.paintPreciseInstantEvent = function(evt, metrics, theme, highlightIndex) {
      var doc = this._timeline.getDocument();
      var text = evt.getText();

      var startDate = evt.getStart();
      var startPixel = Math.round(this._band.dateToPixelOffset(startDate));
      var iconRightEdge = Math.round(startPixel + metrics.iconWidth / 2);
      var iconLeftEdge = Math.round(startPixel - metrics.iconWidth / 2);

      var labelDivClassName = this._getLabelDivClassName(evt);
      var labelSize = this._frc.computeSize(text, labelDivClassName);
      var labelLeft = iconRightEdge + theme.event.label.offsetFromLine;
      var labelRight = labelLeft + labelSize.width;

      var rightEdge = labelRight;
      var track = this._findFreeTrack(evt, rightEdge);

      var labelTop = Math.round(
          metrics.trackOffset + track * metrics.trackIncrement +
          metrics.trackHeight / 2 - labelSize.height / 2);

      var iconElmtData = this._paintEventIcon(evt, track, iconLeftEdge, metrics, theme, 0);
      var labelElmtData = this._paintEventLabel(evt, text, labelLeft, labelTop, labelSize.width,
          labelSize.height, theme, labelDivClassName, highlightIndex);
      var els = [iconElmtData.elmt, labelElmtData.elmt];

      var self = this;
      var clickHandler = function(elmt, domEvt, target) {
          $('[data-criteria-id=' + evt._id + ']').trigger('click');
      };
      SimileAjax.DOM.registerEvent(iconElmtData.elmt, "dragstart",
        function(elmt, domEvt, target){
          domEvt.dataTransfer.setData('text', evt._id);
        }
      );
      SimileAjax.DOM.registerEvent(iconElmtData.elmt, "mousedown",
        function(elmt, domEvt){domEvt.stopPropagation();}
      );
      SimileAjax.DOM.registerEvent(iconElmtData.elmt, "click", clickHandler);
      SimileAjax.DOM.registerEvent(labelElmtData.elmt, "click", clickHandler);

      var hDiv = this._createHighlightDiv(highlightIndex, iconElmtData, theme, evt);
      if (hDiv != null) {els.push(hDiv);}
      this._fireEventPaintListeners('paintedEvent', evt, els);


      this._eventIdToElmt[evt.getID()] = iconElmtData.elmt;
      this._tracks[track] = iconLeftEdge;
    };

    Timeline.OriginalEventPainter.prototype.paintImpreciseInstantEvent = function(evt, metrics, theme, highlightIndex) {
        var doc = this._timeline.getDocument();
        var text = evt.getText();

        var startDate = evt.getStart();
        var endDate = evt.getEnd();
        var startPixel = Math.round(this._band.dateToPixelOffset(startDate));
        var endPixel = Math.round(this._band.dateToPixelOffset(endDate));

        var iconRightEdge = Math.round(startPixel + metrics.iconWidth / 2);
        var iconLeftEdge = Math.round(startPixel - metrics.iconWidth / 2);

        var labelDivClassName = this._getLabelDivClassName(evt);
        var labelSize = this._frc.computeSize(text, labelDivClassName);
        var labelLeft = iconRightEdge + theme.event.label.offsetFromLine;
        var labelRight = labelLeft + labelSize.width;

        var rightEdge = Math.max(labelRight, endPixel);
        var track = this._findFreeTrack(evt, rightEdge);
        var tapeHeight = theme.event.tape.height;
        var labelTop = Math.round(
            metrics.trackOffset + track * metrics.trackIncrement + tapeHeight);

        var iconElmtData = this._paintEventIcon(evt, track, iconLeftEdge, metrics, theme, tapeHeight);
        var labelElmtData = this._paintEventLabel(evt, text, labelLeft, labelTop, labelSize.width,
                            labelSize.height, theme, labelDivClassName, highlightIndex);

        var color = evt.getColor();
        color = color != null ? color : theme.event.instant.impreciseColor;

        var tapeElmtData = this._paintEventTape(evt, track, startPixel, endPixel,
            color, theme.event.instant.impreciseOpacity, metrics, theme, 0);
        var els = [iconElmtData.elmt, labelElmtData.elmt, tapeElmtData.elmt];

        var self = this;
        var clickHandler = function(elmt, domEvt, target) {
            $('[data-criteria-id=' + evt._id + ']').trigger('click');
        };
        SimileAjax.DOM.registerEvent(iconElmtData.elmt, "dragstart",
          function(elmt, domEvt, target){
            domEvt.dataTransfer.setData('text', evt._id);
          }
        );
        SimileAjax.DOM.registerEvent(iconElmtData.elmt, "mousedown",
          function(elmt, domEvt){domEvt.stopPropagation();}
        );
        SimileAjax.DOM.registerEvent(iconElmtData.elmt, "click", clickHandler);
        SimileAjax.DOM.registerEvent(tapeElmtData.elmt, "click", clickHandler);
        SimileAjax.DOM.registerEvent(labelElmtData.elmt, "click", clickHandler);

        var hDiv = this._createHighlightDiv(highlightIndex, iconElmtData, theme, evt);
        if (hDiv != null) {els.push(hDiv);}
        this._fireEventPaintListeners('paintedEvent', evt, els);

        this._eventIdToElmt[evt.getID()] = iconElmtData.elmt;
        this._tracks[track] = iconLeftEdge;
    };

    Timeline.OriginalEventPainter.prototype.paintPreciseDurationEvent = function(evt, metrics, theme, highlightIndex) {
        var doc = this._timeline.getDocument();
        var text = evt.getText();

        var startDate = evt.getStart();
        var endDate = evt.getEnd();
        var startPixel = Math.round(this._band.dateToPixelOffset(startDate));
        var endPixel = Math.round(this._band.dateToPixelOffset(endDate));

        var labelDivClassName = this._getLabelDivClassName(evt);
        var labelSize = this._frc.computeSize(text, labelDivClassName);
        var labelLeft = startPixel;
        var labelRight = labelLeft + labelSize.width;

        var rightEdge = Math.max(labelRight, endPixel);
        var track = this._findFreeTrack(evt, rightEdge);
        var labelTop = Math.round(
            metrics.trackOffset + track * metrics.trackIncrement + theme.event.tape.height);

        var color = evt.getColor();
        color = color != null ? color : theme.event.duration.color;

        var tapeElmtData = this._paintEventTape(evt, track, startPixel, endPixel, color, 100, metrics, theme, 0);
        var labelElmtData = this._paintEventLabel(evt, text, labelLeft, labelTop, labelSize.width,
          labelSize.height, theme, labelDivClassName, highlightIndex);
        var els = [tapeElmtData.elmt, labelElmtData.elmt];

        var self = this;
        var clickHandler = function(elmt, domEvt, target) {
            $('[data-criteria-id=' + evt._id + ']').trigger('click');
        };
        $(tapeElmtData.elmt).prop('draggable', true);
        SimileAjax.DOM.registerEvent(tapeElmtData.elmt, "dragstart",
          function(elmt, domEvt, target){
            domEvt.dataTransfer.setData('text', evt._id);
          }
        );
        SimileAjax.DOM.registerEvent(tapeElmtData.elmt, "mousedown",
          function(elmt, domEvt){domEvt.stopPropagation();}
        );
        SimileAjax.DOM.registerEvent(tapeElmtData.elmt, "click", clickHandler);
        SimileAjax.DOM.registerEvent(labelElmtData.elmt, "click", clickHandler);

        var hDiv = this._createHighlightDiv(highlightIndex, tapeElmtData, theme, evt);
        if (hDiv != null) {els.push(hDiv);}
        this._fireEventPaintListeners('paintedEvent', evt, els);

        this._eventIdToElmt[evt.getID()] = tapeElmtData.elmt;
        this._tracks[track] = startPixel;
    };

    Timeline.OriginalEventPainter.prototype.paintImpreciseDurationEvent = function(evt, metrics, theme, highlightIndex) {
        var doc = this._timeline.getDocument();
        var text = evt.getText();

        var startDate = evt.getStart();
        var latestStartDate = evt.getLatestStart();
        var endDate = evt.getEnd();
        var earliestEndDate = evt.getEarliestEnd();

        var startPixel = Math.round(this._band.dateToPixelOffset(startDate));
        var latestStartPixel = Math.round(this._band.dateToPixelOffset(latestStartDate));
        var endPixel = Math.round(this._band.dateToPixelOffset(endDate));
        var earliestEndPixel = Math.round(this._band.dateToPixelOffset(earliestEndDate));

        var labelDivClassName = this._getLabelDivClassName(evt);
        var labelSize = this._frc.computeSize(text, labelDivClassName);
        var labelLeft = latestStartPixel;
        var labelRight = labelLeft + labelSize.width;

        var rightEdge = Math.max(labelRight, endPixel);
        var track = this._findFreeTrack(evt, rightEdge);
        var labelTop = Math.round(
            metrics.trackOffset + track * metrics.trackIncrement + theme.event.tape.height);

        var color = evt.getColor();
        color = color != null ? color : theme.event.duration.color;

        // Imprecise events can have two event tapes
        // The imprecise dates tape, uses opacity to be dimmer than precise dates
        var impreciseTapeElmtData = this._paintEventTape(evt, track, startPixel, endPixel,
            theme.event.duration.impreciseColor,
            theme.event.duration.impreciseOpacity, metrics, theme, 0);
        // The precise dates tape, regular (100%) opacity
        var tapeElmtData = this._paintEventTape(evt, track, latestStartPixel,
            earliestEndPixel, color, 100, metrics, theme, 1);

        var labelElmtData = this._paintEventLabel(evt, text, labelLeft, labelTop,
            labelSize.width, labelSize.height, theme, labelDivClassName, highlightIndex);
        var els = [impreciseTapeElmtData.elmt, tapeElmtData.elmt, labelElmtData.elmt];

        var self = this;
        var clickHandler = function(elmt, domEvt, target) {
            $('[data-criteria-id=' + evt._id + ']').trigger('click');
        };
        $(tapeElmtData.elmt).prop('draggable', true);
        SimileAjax.DOM.registerEvent(tapeElmtData.elmt, "dragstart",
          function(elmt, domEvt, target){
            domEvt.dataTransfer.setData('text', evt._id);
          }
        );
        SimileAjax.DOM.registerEvent(tapeElmtData.elmt, "mousedown",
          function(elmt, domEvt){domEvt.stopPropagation();}
        );
        SimileAjax.DOM.registerEvent(tapeElmtData.elmt, "click", clickHandler);
        SimileAjax.DOM.registerEvent(labelElmtData.elmt, "click", clickHandler);

        var hDiv = this._createHighlightDiv(highlightIndex, tapeElmtData, theme, evt);
        if (hDiv != null) {els.push(hDiv);}
        this._fireEventPaintListeners('paintedEvent', evt, els);

        this._eventIdToElmt[evt.getID()] = tapeElmtData.elmt;
        this._tracks[track] = startPixel;
    };


       function onLoadTimeline() {
           var timeline_data = {
           'dateTimeFormat': 'iso8601',
           'events' : []
           }

           var tl_el = document.getElementById("tl");
           var eventSource1 = new Timeline.DefaultEventSource();

           var theme = Timeline.ClassicTheme.create();
           theme.event.bubble.width = 250;
           theme.autoWidth = true; // Set the Timeline's "width" automatically.
                                    // Set autoWidth on the Timeline's first band's theme,
                                    // will affect all bands.
           theme.timeline_start = new Date(Date.UTC(1995, 0, 1));
           theme.timeline_stop  = new Date(Date.UTC(2015, 0, 1));



           var date = "2011-01-01T05:00:00Z"
           if (bonnie.timeline) {
             date = bonnie.timeline.getBand(0).getCenterVisibleDate().toString();
           }
           var bandInfos = [
               Timeline.createBandInfo({
                   width:          '100%',
                   intervalUnit:   Timeline.DateTime.DAY,
                   intervalPixels: 80,
                   eventSource:    eventSource1,
                   date:           date,
                   timeZone:       0,
                   theme:          theme
               }),
               Timeline.createBandInfo({
                   width:          "100%",
                   intervalUnit:   Timeline.DateTime.MONTH,
                   intervalPixels: 200,
                   overview:       true,
                   eventSource:    eventSource1,
                   date:           date,
                   timeZone:       0,
                   theme:          theme
               }),
               Timeline.createBandInfo({
                   width:          "100%",
                   intervalUnit:   Timeline.DateTime.YEAR,
                   intervalPixels: 300,
                   eventSource:    eventSource1,
                   date:           date,
                   timeZone:       0,
                   overview:       true,
                   theme:          theme
               })
           ];

           bandInfos[1].syncWith = 0;
           bandInfos[1].highlight = true;
           bandInfos[2].syncWith = 0;
           bandInfos[2].highlight = true;

           for (var i = 0; i < bandInfos.length; i++) {
               bandInfos[i].decorators = [
                   new Timeline.SpanHighlightDecorator({
                       startDate:  bonnie.patientBuilder.getDateString($('#measure_period_start').val(),'12:00 AM'),
                       endDate:    bonnie.patientBuilder.getDateString($('#measure_period_end').val(),'12:00 AM'),
                       color:      "#FFC080",
                       opacity:    50,
                      // theme:      theme,
                      cssClass: 't-highlight1'
                   })
                ];
           }


           // create the Timeline
           tl = Timeline.create(tl_el, bandInfos, Timeline.HORIZONTAL);

           var url = '.'; // The base url for image, icon and background image
                          // references in the data

           eventSource1.loadJSON(timeline_data, url); // The data was stored into the
                                                     // timeline_data variable.

           tl.layout(); // display the Timeline

           bonnie.timeline = tl;
           bonnie.timelineEvents = eventSource1

           bonnie.timeline.getBand(0).addOnScrollListener(function(band) {
             minDate = band.getMinVisibleDate();
             maxDate = band.getMaxVisibleDate();
             bonnie.patientBuilder.highlightSelectedDataCriteria(minDate,maxDate);
           });

       }

       var resizeTimerID = null;
       function onResize() {
           if (resizeTimerID == null) {
               resizeTimerID = window.setTimeout(function() {
                   resizeTimerID = null;
                   tl.layout();
               }, 500);
           }
       }
  </script>

  <script type="text/html" id="bonnie_tmpl_data_criteria_coded">
    <select class="data_criteria_oid"{{if hidden}} style="display: none;"{{/if}}>
      <option value="">--</option>
      {{each bonnie.patientBuilder.orderedValueSets}}
        <option value="${oid}">${display_name}</option>
      {{/each}}
    </select>
  </script>
  
  <script type="text/html" id="bonnie_tmpl_data_criteria_datetime">
    <div class="data_criteria_datetime"{{if hidden}} style="display: none;"{{/if}}>
      <div>
        <input type="text" {{if type}}{{if type == "TS"}} value="${value}"{{/if}}{{/if}} data-date-format="mm/dd/yyyy" class="datetime" />
      </div>
    </div>
  </script>

  <script type="text/html" id="bonnie_tmpl_data_criteria_field_value">
    <div class="row criteria_field_value">
      <div class="span1">
        Field Value
      </div>
      <div class="span3 field_value">
        <div style="text-align: right;" class="close">&times;</div>
        <div>
          <select class="field_type">
            <option value="">--</option>
            <% HQMF::DataCriteria::FIELDS.each do |key,value| %>
              <option value="<%= key %>"><%= value[:title]%></option>
            <% end %>
          </select>
        </div>
        <div>
          <label><input type="radio" class="value_type" value="PQ" checked="checked" />Value</label>
          <label><input type="radio" class="value_type" value="CD" />Coded</label>
          <label><input type="radio" class="value_type" value="TS" />Time</label>
        </div>
        <div class="criteria_value_value">
          <div class="data_criteria_value">
            <div>
              <div class="span3">
                <div class="span1" style="margin:0">
                  scalar
                </div>
                <div class="span1">
                  unit
                </div>
              </div>
            </div>
            <div class="span1" style="margin:0">
              <input type="text" style="width: 60px;"{{if type}}{{if type == "PQ"}} value="${value}"{{/if}}{{/if}} id="element_value" />
            </div>
            <div class="span1">
              <input type="text" style="width: 60px;"{{if value}} value="${unit}"{{/if}} id="element_value_unit" />
            </div>
          </div>
          {{tmpl({hidden:true}) '#bonnie_tmpl_data_criteria_coded'}}
          {{if type}}
            {{if type == "TS"}}
              {{tmpl({hidden:true,value:value,type:type}) '#bonnie_tmpl_data_criteria_datetime'}}
            {{else}}
              {{tmpl({hidden:true}) '#bonnie_tmpl_data_criteria_datetime'}}
            {{/if}}
          {{else}}
            {{tmpl({hidden:true}) '#bonnie_tmpl_data_criteria_datetime'}}
          {{/if}}
        </div>
      </div>
    </div>
  </script>

  <script type="text/html" id="bonnie_tmpl_confirm_shift">
    <div class="modal hide fade in">
      <div class="modal-header">
        <h3>Confirm Date Shift</h3>
      </div>
      <div class="modal-body">
        <p>You have shifted the measurement period ${offsetstring}</p>
        <p>Would you like to shift this record ${offsetstring}?</p>
      </div>
      <div class="modal-footer">
        <button class="close btn" data-dismiss="modal">No</button>
        <button class="btn btn-primary">Yes</button>
      </div>
    </div>
  </script>
  <script type="text/html" id="bonnie_tmpl_data_criteria">
    <div class="paramGroup population" {{if id}}data-criteria-id='${id}'{{/if}}>
      <div class='paramItem logicLeaf'>
        <div class="close removeDataCriteria" style="text-align: right; float: right;">&times;</div>
        <div class='paramText {{if category}}${category}{{/if}}'>
          {{if operator}}<label>${operator}</label>{{/if}}
          {{if category}}<label>{{if specific_occurrence}}<span class="occurrence">Occurrence ${specific_occurrence}:</span>{{/if}} ${category}{{if status}}, ${status}{{/if}}</label>{{/if}}
          ${title} {{if value }}{{if type!='characteristic' }}${valueText}{{/if}}{{/if}} ${fieldsText} ${temporalText}
          <div class="negation_text">{{if negation}} <b>not done:</b> {{if negation_code_list_id}}${bonnie.builder.value_sets[negation_code_list_id].display_name}: ${bonnie.builder.value_sets[negation_code_list_id].description}{{/if}}{{/if}}</div>
        </div>
      </div>
    </div>
  </script>

  <script type="text/html" id="bonnie_tmpl_data_criteria_value">
    <div class="row criteria_value">
      <div class="span1">
      Value
      </div>
      <div class="span3">
        <div style="text-align: right;" class="close">&times;</div>
        <div>
          <label><input type="radio" class="value_type" value="PQ" checked="checked" />Value</label>
          <label><input type="radio" class="value_type" value="CD" />Coded</label>
        </div>
        <div class="criteria_value_value">
          <div class="data_criteria_value">
            <div>
              <div class="span3">
                <div class="span1" style="margin:0">
                  scalar
                </div>
                <div class="span1">
                  unit
                </div>
              </div>
            </div>
            <div class="span1" style="margin:0">
              <input type="text" style="width: 60px;"{{if value}} value="${value}"{{/if}} id="element_value" >
            </div>
            <div class="span1">
              <input type="text" style="width: 60px;"{{if value}} value="${unit}"{{/if}} id="element_value_unit" >
            </div>
          </div>
          {{tmpl({hidden:true}) '#bonnie_tmpl_data_criteria_coded'}}
        </div>
      </div>
    </div>
  </script>

  <script type="text/html" id="bonnie_tmpl_data_criteria_edit">
  <div style="position: relative; border-radius:12px;padding:10px; border:1px solid #aaa;background-color:#CCC;">
    <span class="close_edit" style="position:absolute; top: 0; right: 0;">close</span>
    <div style="width: 0px; height: 0px;"><div class="arrow-w" style="position: relative; top: 45px; left: -86px;"></div></div>
      <h4>${title}</h4>
      <input type="hidden" value="${id}" id="element_id"/>

      <div class="row">
        <div class="span1">
          Event Start
        </div>
        <div class="span3">
          <input type="text" style="width: 150px;" value="01/01/2000 05:00 AM" data-date-format="mm/dd/yyyy" id="element_start" >
        </div>
      </div>

      <div class="row">
        <div class="span1">
          Event End
        </div>
        <div class="span3">
          <input type="text" style="width: 150px;" value="01/01/2000 05:00 AM" data-date-format="mm/dd/yyyy" id="element_end" >
          <label style="float: right;"><input type="checkbox" id="null_element_end" style="float:left;"><span style="padding-left: 3px;">null</span></label>
        </div>
      </div>
      {{each value}}
        {{tmpl($value) '#bonnie_tmpl_data_criteria_value'}}
      {{/each}}
      <div class="row" id="value_new_position">
        <div class="span1">&nbsp;</div>
        <div class="span3"><input type="button" id="value_new" value="New Value" /></div>
      </div>
      <div class="row">
        <div class="span1">
          Not done
        </div>
        <div class="span3">
          <select name="negation">
            <option value="">False</option>
            <option value="true">True</option>
          </select>
        </div>
      </div>
      <div class="row negation_reason_oid" style="display: none">
        <div class="span1">
          Negation Reason
        </div>
        <div class="span3">
          <select name="negation_code_list_id">
            <% @value_sets.map{|s| s.attributes.select{|k,v| ['display_name', 'oid'].include?(k) } }.sort{|l,r| l['display_name'] <=> r['display_name'] }.each {|v|%>
              <option value="<%= v['oid'] %>"><%= v['display_name'] %> - <%= v['oid'] %></option>
            <% } %>
          </select>
        </div>
      </div>
      {{each field_values}}
        {{tmpl($value) '#bonnie_tmpl_data_criteria_field_value'}}
      {{/each}}
      <div class="row" id="field_new_position">
        <div class="span1">&nbsp;</div>
        <div class="span3"><input type="button" id="field_new" value="New Field Value" /></div>
      </div>
      <div class="row">
        <div class="span4">
          <span class="btn" id="element_update">Update</span>
          <span class="btn close_edit" >Cancel</span>
        </div>
      </div>

  </div>
  </script>

<% end %>

<% content_for :page_content do %>

  <div class="pull-right" id="pageButtons">
    <a href="#" class="btn" id="savebutton_matrix">Save to Matrix</a>
    <a href="#" class="btn" id="savebutton">Save</a>
  </div>
	<h1 class="measure-title"><%= "#{@measure.endorser}#{@measure.measure_id}: #{@measure.title}" %></h1>


  <div id="measureDetailInformation" style="padding-top: 60px;">
    <div style="position:relative; margin:5px 20px 5px 15px;">

      <div>
        <div>
          Measure Period Start:
        </div>
        <div>
          <input type="text" value="01/01/2011" data-date-format="mm/dd/yyyy" id="measure_period_start" >
        </div>
        <div>
          Measure Period End:
        </div>
        <div>
          <input type="text" value="12/31/2011" data-date-format="mm/dd/yyyy" id="measure_period_end" >
        </div>
      </div>

      <%= link_to 'Measure Definition', measure_path(@measure), :target => "_blank" %> |
      <%= link_to 'Back', measures_path %>

      <div id="dataCriteria" style="overflow-y: auto; height: 650px;">
        <%=
          render partial: 'data_criteria', locals: {
            criteria_by_category: data_criteria_by_category(@data_criteria),
            patient_builder: true
          }
        %>
      </div>
    </div>
  </div>

  <!-- start tab nav -->
  <div id="tabs" class="measureDetailTable">

    <p id="notice"><%= notice %></p>

    <ul class="nav nav-tabs">
      <li class="patient-tab active"><a href="#patient" data-toggle="tab">Patient</a></li>
    </ul>

    <div id="workspace" style="padding:10px;border-radius:12px;margin:10px;border:1px solid #aaa;background-color:#f5f5f5;float:right;width:340px;min-height:700px">
      <p>Workspace edit controls</p>
    </div>

    <div class="tab-content" id="measureEditContainer">
      <%= form_tag({:action => 'make_patient'}, {:onsubmit => 'bonnie.patientBuilder.save_patient_builder(this); return false', :id => 'save_patient_builder'}) do %>
        <input type="hidden" name="record_id" value="<%= @record['_id'] %>"} />
        <% if params[:clone] %>
          <input type="hidden" name="clone" value="true"} />
        <% end %>
        <input type="hidden" class="redirect_url" value="<%= url_for :action => 'test' %>"} />
        <input type="hidden" class="redirect_matrix_url" value="<%= url_for :action => 'matrix' %>"} />
        <div style="margin: 5px 0 0 30px;">
          <div class="row">
            <div class="span4">
              First Name:
            </div>
            <div class="span4">
              <input type="text" name="first" value="<%= @record['first'] %>">
            </div>
          </div>
          <div class="row">
            <div class="span4">
              Last Name:
            </div>
            <div class="span4">
              <input type="text" name="last" value="<%= @record['last'] %>">
            </div>
          </div>
          <div class="row">
            <div class="span4">
              Gender:
            </div>
            <div class="span4">
              <select id="gender" name="gender">
                <option value="M"<%= 'selected="selected"' if @record['gender'] == 'M' %>>Male</option>
                <option value="F"<%= 'selected="selected"' if @record['gender'] == 'F' %>>Female</option>
              </select>
            </div>
          </div>
          <div class="row">
            <div class="span4">
              Ethnicity:
            </div>
            <div class="span4">
              <select id="ethnicity" name="ethnicity">
                <option value="2186-5"<%= 'selected="selected"' if @record['ethnicity'].try(:[],'code') == '2186-5' %>>Not Hispanic or Latino</option>
                <option value="2135-2"<%= 'selected="selected"' if @record['ethnicity'].try(:[],'code') == '2135-2' %>>Hispanic Or Latino</option>
              </select>
            </div>
          </div>
          <div class="row">
            <div class="span4">
              Race:
            </div>
            <div class="span4">
              <select id="race" name="race">
                <option value="1002-5"<%= 'selected="selected"' if @record['race'].try(:[],'code') == '1002-5' %>>American Indian or Alaska Native</option>
                <option value="2028-9"<%= 'selected="selected"' if @record['race'].try(:[],'code') == '2028-9' %>>Asian</option>
                <option value="2054-5"<%= 'selected="selected"' if @record['race'].try(:[],'code') == '2054-5' %>>Black or African American</option>
                <option value="2076-8"<%= 'selected="selected"' if @record['race'].try(:[],'code') == '2076-8' %>>Native Hawaiian or Other Pacific Islander</option>
                <option value="2106-3"<%= 'selected="selected"' if @record['race'].try(:[],'code') == '2106-3' %>>White</option>
                <option value="2131-1"<%= 'selected="selected"' if @record['race'].try(:[],'code') == '2131-1' %>>Other</option>
              </select>
            </div>
          </div>
          <div class="row">
            <% insurance_types = @record.insurance_providers.try(:collect) {|provider| provider.type} if @record.respond_to? :insurance_providers %>
            <% insurance_types ||= [] %>
            <% insurance_type = insurance_types.length > 0 ? insurance_types[0] : 'OT' %>
            <div class="span4">
              Payer:
            </div>
            <div class="span4">
              <select id="payer" name="payer">
                <option value="MA"<%= 'selected="selected"' if insurance_type == 'MA' %>>Medicare</option>
                <option value="MC"<%= 'selected="selected"' if insurance_type == 'MC' %>>Medicaid</option>
                <option value="OT"<%= 'selected="selected"' if insurance_type == 'OT' %>>Other</option>
              </select>
            </div>
          </div>
          <div class="row">
            <div class="span4">
              Expired:
            </div>
            <div class="span4">
              <input type="radio" name="expired"<%= ' checked="checked"' if !@record['expired'] %> value="false" id="alive_radio" style="float:left;"/>
              <label for="alive_radio" style="float:left;">&nbsp;Alive&nbsp;</label>
              <input type="radio" name="expired"<%= ' checked="checked"' if @record['expired'] %> value="true" id="deceased_radio" style="float:left;"/>
              <label for="deceased_radio" style="float:left;">&nbsp;Deceased&nbsp;</label>
            </div>
          </div>
          <div class="row">
            <div class="span4">
              Birthdate:
            </div>
            <div class="span4">
              <input type="text" class="span3" value="<%= Time.at(@record['birthdate'] || 946715400).utc.strftime('%m/%d/%Y %H:%M') %>" name="birthdate" id="birthdate" style="z-index:500; position: relative;" >
            </div>
          </div>

          <% if !@dropped_data_criteria.empty? %>
	          <div class="row" style="padding: 10px; background-color: #ED4337;">
	            <div class="span4" style="font-weight: bold">
	              Dropped Data Criteria
	            </div>
	            <div class="span6" style="font-weight: bold">
	              <% @dropped_data_criteria.each do |dropped| %>
		                 <b><%= dropped['id'] %></b><br>
		                 <div style="padding-left: 10px;">
		                 <% dropped.each do |key, value| %>
                       <% if (key != 'id') %>
                         <% if (key == 'start_date' || key == 'end_date') %>
                           <%= key %>: <%= Time.at(value/1000) %> <br/>
	                       <% else %>
                           <%= key %>: <%= value%> <br/>
		                     <% end %>
	                     <% end %>
                     <% end %>
                     </div>
                  <br/>
                <% end %>	
	            </div>
	          </div>
          <% end %>
	
          <div class="row">
            <div class="span4" style="font-weight: bold">
              Clinical Attributes
            </div>
            <div class="span6" style="margin: 5px 0 0 40px; min-height: 300px; padding-left: 5px; border: 1px #CCC solid;" id="patient_data_criteria">
              &nbsp;
            </div>
          </div>
          <div class="row">&nbsp;</div>
          <div class="row">
            <div class="span4" style="font-weight: bold">Description</div>
            <div class="span6" style="clear: left; margin: 5px 0 0 40px;">
              <label style="display: inline; margin-right: 7px;"><input type="radio" name="description_category" value="IPP"<%= ' checked="checked"' if @record['description_category'] == 'IPP' %> style="display: inline;"> Initial Population</label>
              <label style="display: inline; margin-right: 7px;"><input type="radio" name="description_category" value="NUMER"<%= ' checked="checked"' if @record['description_category'] == 'NUMER' %> style="display: inline;"> Numerator</label>
              <label style="display: inline; margin-right: 7px;"><input type="radio" name="description_category" value="DENOM"<%= ' checked="checked"' if @record['description_category'] == 'DENOM' %> style="display: inline;"> Denominator</label>
              <label style="display: inline; margin-right: 7px;"><input type="radio" name="description_category" value="EXCL"<%= ' checked="checked"' if @record['description_category'] == 'EXCL' %> style="display: inline;"> Exclusions</label>
              <label style="display: inline; margin-right: 7px;"><input type="radio" name="description_category" value="DENEXCEP"<%= ' checked="checked"' if @record['description_category'] == 'DENEXCEP' %> style="display: inline;"> Exceptions</label>
            </div>
            <div class="span6" style="clear: left; margin: 5px 0 0 40px;"><textarea name="description" style="width: 100%; height: 100px;"><%= @record['description'] %></textarea></div>
          </div>
        </div>
      <% end %>
    </div>

  </div><!-- end #tabs -->

  <div style="width: 630px; margin-left: 310px; margin-top: 20px;">
  <div id='tl'></div>
  </div>

<% end -%>
